//@author: elliotwoods
//@help: select a volume (still doing this old trick?)
//@tags: texture
//@credits: 

Texture2D<float3> texture2d : PREVIOUS;
float Radius = 1.0f;
float Thickness = 0.1f;
float Phase = 0.0f;
float4x4 TransformInverse;
float2 TargetSize:TARGETSIZE;
Texture2D<float3> sunGradientTexture;
Texture2D<float3> skyGradientTexture;

// ----------------------------------------------------
SamplerState linearSampler : IMMUTABLE
{
    //Filter = MIN_MAG_MIP_LINEAR;
	Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

// ----------------------------------------------------
struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

// ----------------------------------------------------
float4 PSSphere(psInput input) : SV_Target
{
	float4 World;
	World.xyz = texture2d.Sample(linearSampler,input.uv);
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
	return abs(length(World.xyz) - Radius) < Thickness;
}

// ----------------------------------------------------
float4 PSSphereFill(psInput input) : SV_Target
{
	float2 x = TargetSize * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
	return length(World.xyz) < Radius;
}

// ----------------------------------------------------
float4 PSSphereFillGradient(psInput input) : SV_Target
{
	float2 x = TargetSize * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	float value = length(World.xyz) / Radius;
	value = clamp(value, 0, 1);
	value = 1.0f - value;
	return value;
}

// ----------------------------------------------------
float4 PSSphereFillGradientNegative(psInput input) : SV_Target
{
	float2 x = TargetSize * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	float value = length(World.xyz) / Radius;
	value = clamp(value, 0, 1);
	value *= value < 1.0f;
	return value;
}

// ----------------------------------------------------
float4 PSPlane(psInput input) : SV_Target
{
	float4 World;
	World.xyz = texture2d.Sample(linearSampler,input.uv);
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
	return 1 - smoothstep(0.0f, Thickness, abs(length(World.y) - Radius));
}

// ----------------------------------------------------
float4 PSSunrise(psInput input) : SV_Target
{
	/*
	float val = PSSphereFillGradient(input).x;
	//val = smoothstep( 0.0, 0.4, val );
	float2 sunriseLookupUV = float2(1.0-val,0);
	//sunriseLookupUV.x = cloamp( sunriseLookupUV.x, 0.0, 0.99 );
	float3 sunCol = sunGradientTexture.Sample(linearSampler,sunriseLookupUV);
	return float4( sunCol, 1.0 );
	//return val;
	*/

	
	float2 x = TargetSize * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
	float tmpDist = length(World.xyz);
	
	if( tmpDist <= Radius )
	{
		float2 sunriseLookupUV = float2((tmpDist / Radius),0.0);
		float3 sunCol = sunGradientTexture.Sample(linearSampler,sunriseLookupUV);		
		return float4( sunCol, 1.0 );
		return 1.0 - (tmpDist / Radius);
	}
	else
	{
		return 0.0;		
	}

}

// ----------------------------------------------------
technique10 Sun
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSunrise()));
	}
}

// ----------------------------------------------------
technique10 Sphere
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphere()));
	}
}

// ----------------------------------------------------
technique10 SphereFill
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFill()));
	}
}

// ----------------------------------------------------
technique10 SphereFillGradient
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFillGradient()));
	}
}

// ----------------------------------------------------
technique10 SphereFillGradientNegative
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFillGradientNegative()));
	}
}

// ----------------------------------------------------
technique10 Plane
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSPlane()));
	}
}

