//@author: elliotwoods
//@help: select a volume (still doing this old trick?)
//@tags: texture
//@credits: 

Texture2D<float3> texture2d : PREVIOUS;
float Height = 0.1f;
float Alpha = 1.0f;
float4x4 TransformInverse;
float2 TargetSize:TARGETSIZE;

Texture2D<float3> skyGradientTexture;

// ----------------------------------------------------
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
	//Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};


// ----------------------------------------------------
SamplerState paletteSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
	//Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};


// ----------------------------------------------------
struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


// ----------------------------------------------------
float4 PSSkyGradient(psInput input) : SV_Target
{	
	float4 World;
	World.xyz = texture2d.Sample(linearSampler,input.uv);
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
//	float tmpVal = clamp(World.y - Height, 0.0f, Height) / Height;
//	tmpVal = 1.0 - tmpVal;

	float tmpDist = World.y;
	
	if( tmpDist <= Height )
	{
		//float2 LookupUV = float2(1.0-(tmpDist / Height),0.0);
		float2 LookupUV = float2((tmpDist / Height),0.0);		
		float3 sunCol = skyGradientTexture.Sample(paletteSampler,LookupUV);	
		float3 finalColor = lerp(sunCol, float3(0,0,0), 1.0-Alpha);	
		return float4( finalColor, 1.0 );
	}
	else
	{
		return 0.0;		
	}	
	
	
	//return float4(tmpVal,tmpVal,tmpVal,1.0);
	
	/*
	float lookupX = smoothstep(0.0f, Thickness, abs(length(World.y) - Radius));
	float2 sunriseLookupUV = float2(1.0-lookupX,0.0);
	float3 sunCol = skyGradientTexture.Sample(linearSampler,sunriseLookupUV);	
	
	float3 finalColor = lerp(sunCol, float3(0,0,0), 1.0-Alpha);
	
	return float4( finalColor, 1.0 );
	*/
	
	
}

// ----------------------------------------------------
technique10 SkyGradient
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSkyGradient()));
	}
}

